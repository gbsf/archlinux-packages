--- lshwd-1.1.3/lshwd.c	2007-02-04 13:06:58.000000000 +0000
+++ lshwd-1.1.3/lshwd.c	2007-02-04 13:09:45.000000000 +0000
@@ -166,7 +166,9 @@ sort_pci_list(void)
 	
 	/* counting number of total devices */
 	for(cnt=0,d=first_dev; d; d=d->next)
-		cnt++;
+	{	cnt++;
+		pci_fill_info(d, PCI_FILL_IDENT | PCI_FILL_BASES);	/* Fill in header info we need 	*/
+        }
 	/* allocating memory for all pci devices */
 	h = index = alloca(sizeof(struct pci_dev *) * cnt);
 	for(d=first_dev; d; d=d->next)
@@ -521,8 +523,8 @@ find_ethernet_devices(char *module)
 
 /* copied getxinfo from hwsetup, by  Klaus Knopper <knopper@knopper.net> */
 #define CARDSDB "/usr/share/hwdata/Cards"
-#define XPATH "/usr/X11R6/bin/"
-#define XMODPATH "/usr/X11R6/lib/modules/drivers/"
+#define XPATH "/usr/bin/"
+#define XMODPATH "/usr/lib/xorg/modules/drivers/"
 
 int exists(char *filename)
 {
@@ -542,7 +544,7 @@ struct xinfo {
 struct xinfo *
 getxinfo ( char* devdesc, char* devdriver )
 {
-	const char *xfree4 = "XFree86", *xvesa4 = "vesa";
+	const char *xfree4 = "Xorg", *xvesa4 = "vesa";
 	const char *xpath = XPATH;
 	static struct xinfo xi;
 	int rescanned = 0;
@@ -616,7 +618,7 @@ getxinfo ( char* devdesc, char* devdrive
 							char xmodule[ 32 ];
 							char fullpath[ 128 ];
 							sscanf ( &buffer[ 7 ], "%31s", xmodule );
-							sprintf ( fullpath, XMODPATH "%.31s_drv.o", xmodule );
+							sprintf ( fullpath, XMODPATH "%.31s_drv.so", xmodule );
 							if ( exists ( fullpath ) )
 							{
 								strncpy ( xi.xmodule, xmodule, sizeof( xi.xmodule ) );
@@ -750,7 +752,7 @@ int
 check_module(char *module)
 {
 	struct pci_dev *d;
-	byte descbuf[128], modulebuf[128];
+	char descbuf[128], modulebuf[128];
 	
 	for(d=first_dev; d; d=d->next)
 	{
@@ -772,8 +774,8 @@ list_pci(void)
 	unsigned int c;
 	struct pci_access *pacc;
 	struct pci_dev *dev;
-	byte lastclassbuf[128]={0};
-	byte classbuf[128], descbuf[128], modulebuf[128];
+	char lastclassbuf[128]={0};
+	char classbuf[128], descbuf[128], modulebuf[128];
 	char idstring[20]={0};
 
 	init_lookup_block("pcitable");
@@ -814,7 +816,6 @@ list_pci(void)
 	for(dev=first_dev; dev; dev=dev->next)			/* Iterate over all devices 		*/
 	{
 		/* look for pci information : name, module, description  */
-		pci_fill_info(dev, PCI_FILL_IDENT | PCI_FILL_BASES);	/* Fill in header info we need 	*/
 		c = pci_read_word(dev, PCI_CLASS_DEVICE);	/* Read config register directly 	*/
 		char *pclassbuf =
 			pci_lookup_name(pacc, classbuf, sizeof(classbuf),
@@ -905,8 +906,8 @@ list_usb(void)
 	usb_dev_handle *udev; 
 	struct usb_device *dev; 
 	struct usb_interface_descriptor desc;
-	byte lastclassbuf[128]={0};
-	byte string[128],classbuf[128], descbuf[128], modulebuf[128];
+	char lastclassbuf[128]={0};
+	char string[128],classbuf[128], descbuf[128], modulebuf[128];
 	char idstring[20]={0};
 
 	/* TODO: the approp modules are loaded anyway if usb controllers were found, so 
@@ -1041,7 +1042,7 @@ out_list_usb:
 void
 list_mouse(void)
 {
-	byte devicebuf[128], descbuf[128], modulebuf[128];
+	char devicebuf[128], descbuf[128], modulebuf[128];
 	char idstring[20]={0};
 	
 	if (psauxProbe( devicebuf, modulebuf, descbuf))
@@ -1087,8 +1088,8 @@ list_pcmcia(void)
 	cistpl_funcid_t *funcid = &arg.tuple_parse.parse.funcid;
 	config_info_t config;
 	int fd[MAX_SOCKS];
-	byte lastclassbuf[128]={0};
-	byte string[128],classbuf[128], descbuf[128], modulebuf[128];
+	char lastclassbuf[128]={0};
+	char string[128],classbuf[128], descbuf[128], modulebuf[128];
 	char idstring[20]={0};
 	static char *pcmcia_fn[] = 
 	{
@@ -1171,8 +1172,8 @@ list_firewire(void)
 {
 	//int loaded_driver = 0;
 	unsigned long specid, version;
-	byte lastclassbuf[128]={0};
-	byte node[16],classbuf[128], descbuf[128], modulebuf[128];
+	char lastclassbuf[128]={0};
+	char node[16],classbuf[128], descbuf[128], modulebuf[128];
 	char idstring[20]={0};
 	
 	char *next, *buf = NULL, *tmp;
